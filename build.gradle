import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "base"
    id 'maven-publish'
    id "com.github.spotbugs" version "4.0.5"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "de.undercouch.download" version "4.0.4"
    id "net.researchgate.release" version "2.8.0"
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
}

apply plugin: 'java'
apply plugin: "com.github.spotbugs"
apply plugin: 'jacoco'
apply plugin: "org.javamodularity.moduleplugin"

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.testngVersion = project.testngVersion
ext.slf4jVersion = project.slf4jVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibHttpVersion = project.stdlibHttpVersion
ext.stdlibUrlVersion = project.stdlibUrlVersion
ext.stdlibXmldataVersion = project.stdlibXmldataVersion
ext.puppycrawlCheckstyleVersion = "8.18"

def packageName = "asyncapi"

configurations {
    balTools
}

allprojects {
    group = 'io.ballerina'
    version = project.version
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }
        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    checkstyle {
        toolVersion '8.16'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    def excludePattern = '**/module-info.java'
    tasks.withType(Checkstyle) {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        exclude excludePattern
    }
}

subprojects {
    apply plugin: 'java'
    dependencies {
        implementation 'io.apicurio:apicurio-data-models:1.1.15'
        implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.5'
        implementation 'commons-io:commons-io:2.11.0'
        implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
        implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
        implementation "io.ballerina.stdlib:http-native:${stdlibHttpVersion}"
        implementation "org.ballerinalang:language-server-commons:${ballerinaLangVersion}"
        implementation "info.picocli:picocli:4.0.1"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation "org.testng:testng:7.3.0"
    }
}

ext {
    snapshotVersion= '-SNAPSHOT'
    timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
}

test {
    useTestNG() {
        suites "src/test/resources/testng.xml"
    }
}

def moduleVersion = project.version.replace("-SNAPSHOT", "")

release {
    // Disable check snapshots temporarily
    failOnPublishNeeded = false
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled(true)
        html.enabled(true)
        csv.enabled(true)
        xml.destination(new File("${buildDir}/reports/jacoco/report.xml"))
        html.destination(new File("${buildDir}/reports/jacoco/report.html"))
        csv.destination(new File("${buildDir}/reports/jacoco/report.csv"))
    }

    onlyIf = {
        true
    }
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    dependencies {
        include(dependency('com.github.jknack:handlebars'))
        include(dependency('org.antlr:antlr4:4.5'))
        include(dependency('io.apicurio:apicurio-data-models:1.1.15'))
        include(dependency('com.atlassian.commonmark:commonmark'))
        include(dependency('com.atlassian.commonmark:commonmark-ext-gfm-tables'))
        exclude('META-INF/*.SF')
        exclude('META-INF/*.DSA')
        exclude('META-INF/*.RSA')
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def targetAsyncApiCliJar = file("$project.rootDir/asyncapi-cli/build/libs/asyncapi-cli-${project.version}.jar")

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task directoryBuild {
    inputs.dir file(project.projectDir)
    doLast {
        copy {
            from targetAsyncApiCliJar
            into file("$artifactLibParent/libs")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${buildDir}/distributions")
    from directoryBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/asyncapi-tools")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

directoryBuild.dependsOn ":${packageName}-cli:build"
build.dependsOn directoryBuild

publish.dependsOn build
