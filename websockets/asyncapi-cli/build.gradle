apply plugin: "java"

description = "Ballerina - AsyncAPI Tooling - AsynAPI to Ballerina"

group 'io.ballerina.asyncapi.cli'

configurations {
    dist {
        transitive true
    }
}

dependencies {
    implementation project(':config:checkstyle')
    implementation project(':asyncapi-core')
    implementation "info.picocli:picocli:${picocliVersion}"
}

clean {
    delete "$project.projectDir/build"
    delete "$project.rootDir/target"
}


tasks.register("jBallerinaPack")
tasks.register("unpackStdLibs")
tasks.register("copyStdlibs")

def ballerinaDist = "$project.buildDir/jballerina-tools-${ballerinaLangVersion}"
def runtimePath = "${project.rootDir}/target/ballerina-distribution"
jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}")
            }
            copy {
                from(project.zipTree(artifact.getFile())) {
                    eachFile { fcd ->
                        fcd.relativePath = new RelativePath(!fcd.file.isDirectory(), fcd.relativePath.segments.drop(1))
                    }
                    includeEmptyDirs = false
                }
                into runtimePath
            }
        }
    }
    outputs.dir ballerinaDist
}

unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip")
            }
        }
    }
}

copyStdlibs() {
    dependsOn(unpackStdLibs)
    /* Standard Libraries */
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def artifactExtractedPath = "${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip"
            copy {
                into ballerinaDist
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
            copy {
                into runtimePath
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
        }
        def asyncapiCliJar = "${project.rootDir}/asyncapi-cli/build/libs/asyncapi-cli-${project.version}.jar"
        def asyncapiCoreJar = "${project.rootDir}/asyncapi-core/build/libs/asyncapi-core-${project.version}.jar"
        copy {
            into ballerinaDist
            into("bre/lib") {
                from "${asyncapiCliJar}"
                from "${asyncapiCoreJar}"
            }
        }
        copy {
            into runtimePath
            into("bre/lib") {
                from "${asyncapiCliJar}"
                from "${asyncapiCoreJar}"
            }
        }
    }
}

test {
    dependsOn(copyStdlibs)
    systemProperty "ballerina.home", ballerinaDist
    systemProperty "ballerina.offline.flag", "true"
    useTestNG() {
        suites "src/test/resources/testng.xml"
    }

    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

test.dependsOn ":asyncapi-core:build"
