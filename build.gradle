/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id "java"
    id "base"
    id "jacoco"
    id "checkstyle"
    id 'maven-publish'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id 'org.javamodularity.moduleplugin' version "${javaModularityVersion}" apply false
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

allprojects {
    group = 'io.ballerina'
    version = project.version

    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    configurations {
        ballerinaStdLibs
        balTools
        jacocoRuntime
        checkstyle
        ext {
            snapshotVersion= '-SNAPSHOT'
            timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
        }
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {
    apply plugin: 'java'
    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleToolVersion}"
        implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
        implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
        implementation "io.apicurio:apicurio-data-models:${apicurioVersion}"
        testImplementation "org.testng:testng:${testngVersion}"
        jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"

        balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
            transitive = false
        }

        /* Standard libraries */
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${stdlibOsVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:regex-ballerina:${stdlibRegexVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:task-ballerina:${stdlibTaskVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:file-ballerina:${stdlibFileVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:jwt-ballerina:${stdlibJwtVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${stdlibOAuth2Version}"
        ballerinaStdLibs "io.ballerina.stdlib:uuid-ballerina:${stdlibUuidVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${stdlibUrlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:xmldata-ballerina:${stdlibXmldataVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:kafka-ballerina:${stdlibKafkaVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:rabbitmq-ballerina:${stdlibRabbitMqVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:websocket-ballerina:${stdlibWebsocketVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
    }
    checkstyle {
        toolVersion "${checkstyleToolVersion}"
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
        configProperties = ["suppressionFile": rootProject.file("config/checkstyle/build/suppressions.xml")]
    }
    def excludePattern = '**/module-info.java'
    tasks.withType(Checkstyle) {
        exclude excludePattern
    }
    tasks.register("validateSpotbugs") {
        doLast {
            if (spotbugsMain.reports.size() > 0 &&
                    spotbugsMain.reports[0].destination.exists() &&
                    spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
                spotbugsMain.reports[0].destination?.eachLine {
                    println 'Failure: ' + it
                }
                throw new GradleException("Spotbugs rule violations were found.")
            }
        }
    }

    spotbugsMain {
        ignoreFailures = true
        effort = "max"
        reportLevel = "low"
        reportsDir = file("$project.buildDir/reports/spotbugs")
        def excludeFile = file("spotbugs-exclude.xml")
        if (excludeFile.exists()) {
            it.excludeFilter = excludeFile
        }
        reports {
            text.enabled = true
        }
    }

    spotbugsTest {
        it.enabled = false
    }

    jacocoTestReport {
        reports {
            xml.required=true
        }
    }
    compileJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }
    spotbugsMain.finalizedBy validateSpotbugs
}

//def moduleVersion = project.version.replace("-SNAPSHOT", "")
//release {
//    // Disable check snapshots temporarily
//    failOnPublishNeeded = false
//    buildTasks = ['buildProject']
//    versionPropertyFile = 'gradle.properties'
//    tagTemplate = 'v${version}'
//    git {
//        // To release from any branch
//        requireBranch = "release-${moduleVersion}"
//        pushToRemote = 'origin'
//    }
//}

tasks.register("codeCoverageReport",JacocoReport)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


codeCoverageReport() {
    dependsOn = subprojects.test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {

        xml.required=true
        html.required=true
        csv.required=true
        xml.outputLocation=new File("${buildDir}/reports/jacoco/report.xml")
        html.outputLocation=new File("${buildDir}/reports/jacoco/report.html")
        csv.outputLocation=new File("${buildDir}/reports/jacoco/report.csv")
    }

    onlyIf = {
        true
    }
}
